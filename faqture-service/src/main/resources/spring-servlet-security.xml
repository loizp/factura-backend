<?xml version="1.0" encoding="UTF-8"?>
<beans:beans
	xmlns="http://www.springframework.org/schema/security"
	xmlns:beans="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
		http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
		http://www.springframework.org/schema/security
		http://www.springframework.org/schema/security/spring-security.xsd">
	<!-- En esta línea, activamos las anotaciones @PreFilter, @PreAuthorize, 
		@PostFilter, @PostAuthorize en cualquier bean del contexto spring -->
	<global-method-security
		pre-post-annotations="enabled" />
	<!-- Definimos los puntos finales de inicio de sesión y registro para saltear 
		la seguridad; incluso "anónimo" debería poder hacer estas operaciones. -->
	<http pattern="/" security="none" />
	<http pattern="/auth/*" security="none" />
	<!-- Definimos la cadena de filtro aplicada a todas las solicitudes al agregar 
		dos configuraciones importantes: referencia de punto de entrada y establecer 
		la creación de la sesión como sin estado (no queremos que la sesión se cree 
		por razones de seguridad ya que estamos utilizando tokens para cada solicitud) -->
	<http entry-point-ref="jwtAuthenticationEntryPoint"
		create-session="stateless" use-expressions="true">
		<cors configuration-source-ref="corsSource"/>
		<!-- No necesitamos protección csrf porque nuestros tokens son inmunes 
			a ella -->
		<csrf disabled="true" />
		<!-- Definimos la cadena de filtro aplicada a todas las solicitudes al 
			agregar dos configuraciones importantes: referencia de punto de entrada y 
			establecer la creación de la sesión como sin estado (no queremos que la sesión 
			se cree por motivos de seguridad ya que estamos utilizando tokens para cada 
			solicitud) -->
		<custom-filter before="FORM_LOGIN_FILTER"  ref="jwtAuthenticationTokenFilter" />
		
		<intercept-url pattern="/**" access="hasRole('ROLE_APICLIENT')" />
	</http>
	
	<beans:bean id="corsSource" class="org.springframework.web.cors.UrlBasedCorsConfigurationSource" />
	 
	<beans:bean id="jwtAuthenticationEntryPoint" class="com.sunqubit.faqture.service.security.JwtAuthenticationEntryPoint" />
                
	<beans:bean id="jwtAuthenticationTokenFilter" class="com.sunqubit.faqture.service.security.JwtAuthenticationTokenFilter" />
	
	<beans:bean id="jwtTokenUtil" class="com.sunqubit.faqture.service.security.JwtTokenUtil" />
	
    <authentication-manager alias="authenticationManager">
        <authentication-provider user-service-ref="userSecurityService">
            <password-encoder ref="bcryptEncoder" />
        </authentication-provider>
    </authentication-manager>

    <beans:bean id="bcryptEncoder" class="org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder" />

    <beans:bean id="userSecurityService" class="com.sunqubit.faqture.service.security.UserSecurityService" />

</beans:beans>
